Given a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C.

Here, a circular array means the end of the array connects to the beginning of the array.  (Formally, C[i] = A[i] when 0 <= i < A.length, and C[i+A.length] = C[i] when i >= 0.)

Also, a subarray may only include each element of the fixed buffer A at most once.  (Formally, for a subarray C[i], C[i+1], ..., C[j], there does not exist i <= k1, k2 <= j with k1 % A.length = k2 % A.length.)

 

Example 1:

Input: [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3


#Learning
case 1: Sum lies inside the range -> res1 = kadane(A);
case 2: Sum lies in the corner -> res2 = kadane(-A) + sumOf(A)
case 3: negative sum: find max in the array
result is max(res1, res2)

1. DSA Used: kadane algo for lagest sum subarray
2. Complexity: Hard
3. Time taken:more than 2 hrs
4. Time Comlexity: O(n)
5. Space Complexity: constant

