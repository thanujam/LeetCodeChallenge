In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

 

Example 1:


Input: root = [1,2,3,4], x = 4, y = 3
Output: false

#Learning
1. DSA Used: DFS
2. Complexity: Medium
3. Time taken: 40 minS
4. Time Comlexity: O(n)
5. Space Complexity: O(h)

#Edit
Tried to get depth and height in the same fumction
class Solution {
public:
    int xDepth = 0;
    int yDepth = 0;
    TreeNode* parentX = NULL;
    TreeNode* parentY = NULL;
    
    void getParent(TreeNode* root, int x, int y, int d);
    
    bool isCousins(TreeNode* root, int x, int y) {
        
        if(root->val == x)
        {
            xDepth = 0;
            parentX = NULL;
        }
        else if(root->val == y)
        {
            yDepth = 0;
            parentY = NULL;
        }
        
        getParent(root, x, y , 0);
        
        cout<<xDepth<< " "<<yDepth <<endl;
        if(parentX)
           cout<<parentX->val<<" ";
        if(parentY)
            cout<<parentY->val<<endl;
        if(xDepth == yDepth && parentX != parentY)
            return true;
        
        return false;
    }
};

void Solution :: getParent(TreeNode* root, int x, int y, int depth)
{
    if( root == NULL)
        return ;
       
    if(root->left || root->right)
        depth++;
    
    if(root->left)
    {
        if(root->left->val == x)
        {
            parentX = root;
            xDepth = depth + 1;
        }
        else if(root->left->val == y)
        {
            parentY = root;
            yDepth = depth + 1;
        }
        getParent(root->left, x, y, depth);
    }
    if(root->right)
    {
        if(root->right->val == x)
        {
            parentX = root;
            xDepth = depth + 1;
        }
        else if(root->right->val == y)
        {
            parentY = root;
            yDepth = depth + 1;
        }
        getParent(root->right, x, y, depth);
    }
}
